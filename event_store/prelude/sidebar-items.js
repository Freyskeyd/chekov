initSidebarItems({"enum":[["EventStoreError",""],["ExpectedVersion","The `ExpectedVersion` used to define optimistic concurrency"],["ReadVersion",""],["StorageError",""],["SubscriptionNotification",""]],"struct":[["Appender","An Appender defines the parameters of an append action"],["EventStore","An `EventStore` that hold a storage connection"],["InMemoryBackend",""],["InMemoryEventBus",""],["PostgresBackend",""],["PostgresEventBus",""],["Reader",""],["RecordedEvent","A `RecordedEvent` represents an `Event` which have been append to a `Stream`"],["RecordedEvents",""],["Stream","A `Stream` represents an `Event` stream"],["StreamInfo",""],["Subscription",""],["SubscriptionOptions",""],["Subscriptions","Subscribe to a stream start a subscription in the superviseur The supervisor starts a subscription actor The subscription actor create a new FSM The subscription actor receive a Connect message - the FSM connects the subscriber - the Fsm subscribe"],["SubscriptionsSupervisor",""],["UnsavedEvent","An `UnsavedEvent` is created from a type that implement Event"]],"trait":[["Event","Represent event that can be handled by an `EventStore`"],["EventBus",""],["Storage","A `Storage` is responsible for storing and managing `Stream` and `Event`for a `Backend`"]]});